name: Build ARM Docker Image

on:
  push:
    branches: [ main, code_structure ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout frontend repo
      uses: actions/checkout@v4

    - name: Checkout config repo (public)
      uses: actions/checkout@v4
      with:
        repository: droman42/wb-mqtt-bridge
        path: wb-mqtt-bridge
        ref: main

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache Python packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('wb-mqtt-bridge/pyproject.toml', 'wb-mqtt-bridge/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install wb-mqtt-bridge package
      run: |
        cd wb-mqtt-bridge
        # Install in editable mode with dependencies
        pip install --upgrade pip setuptools wheel
        pip install -e .
        cd ..
        
    - name: Verify package installation
      run: |
        # Verify the package can be imported
        python3 -c "import wb_mqtt_bridge; print('✅ Package imported successfully')"
        python3 -c "from wb_mqtt_bridge.domain.devices.models import WirenboardIRState; print('✅ Device models import successful')"
        python3 -c "from wb_mqtt_bridge.infrastructure.scenarios.models import ScenarioWBConfig; print('✅ Scenario models import successful')"

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install Node.js dependencies
      run: npm ci

    - name: Validate type generation
      run: |
        # Debug Python environment
        echo "Python executable: $(which python3)"
        echo "Python version: $(python3 --version)"
        echo "Python path: $PYTHONPATH"
        python3 -c "import sys; print('Python sys.path:', sys.path)"
        
        # Test package availability one more time before generation
        python3 -c "from wb_mqtt_bridge.domain.devices.models import WirenboardIRState; print('Final verification: Package available')"
        
        # Ensure npm scripts use the same Python executable and environment
        export PYTHONPATH="${PYTHONPATH}:$(pwd)"
        export PYTHON_EXECUTABLE="$(which python3)"
        export PATH="$(dirname $(which python3)):$PATH"
        
        # Final debug before generation
        echo "Using Python executable: $PYTHON_EXECUTABLE"
        
        # Run type generation
        npm run gen:device-pages -- --batch --mode=package --mapping-file=config/device-state-mapping.json --generate-router

    - name: Run TypeScript validation
      run: |
        npm run typecheck:all

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build ARM Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/arm/v7
        tags: wb-mqtt-ui:latest
        outputs: type=docker,dest=/tmp/wb-mqtt-ui.tar
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Compress Docker image
      run: |
        gzip /tmp/wb-mqtt-ui.tar

    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: wb-mqtt-ui-image
        path: /tmp/wb-mqtt-ui.tar.gz
        retention-days: 30

    - name: Upload build logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          npm-debug.log*
          yarn-error.log*
        retention-days: 7 